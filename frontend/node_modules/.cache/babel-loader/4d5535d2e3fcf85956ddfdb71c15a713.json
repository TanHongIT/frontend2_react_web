{"ast":null,"code":"import axios from \"axios\";\nimport { PRODUCT_LIST_REQUEST, PRODUCT_LIST_SUCCESS, PRODUCT_LIST_FAIL, PRODUCT_DETAILS_REQUEST, PRODUCT_DETAILS_FAIL, PRODUCT_DETAILS_SUCCESS } from \"../constants/productConstants\";\n\nconst listProducts = () => async dispatch => {\n  try {\n    dispatch({\n      type: PRODUCT_LIST_REQUEST\n    });\n    const {\n      data\n    } = await axios.get('/api/products');\n    dispatch({\n      type: PRODUCT_LIST_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: PRODUCT_LIST_FAIL,\n      payload: error.message\n    });\n  }\n};\n\nconst detailsProduct = productId => async dispatch => {\n  try {\n    dispatch({\n      type: PRODUCT_DETAILS_REQUEST,\n      payload: productId\n    });\n    const {\n      data\n    } = await axios.get('/api/products/' + productId);\n    dispatch({\n      type: PRODUCT_DETAILS_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: PRODUCT_DETAILS_FAIL,\n      payload: error.message\n    });\n  }\n};\n\nconst saveProduct = product => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: PRODUCT_SAVE_REQUEST,\n      payload: product\n    });\n    const {\n      userSignin: {\n        userInfo\n      }\n    } = getState();\n\n    if (!product._id) {\n      const {\n        data\n      } = await Axios.post('/api/products', product, {\n        headers: {\n          Authorization: 'Bearer ' + userInfo.token\n        }\n      });\n      dispatch({\n        type: PRODUCT_SAVE_SUCCESS,\n        payload: data\n      });\n    } else {\n      const {\n        data\n      } = await Axios.put('/api/products/' + product._id, product, {\n        headers: {\n          Authorization: 'Bearer ' + userInfo.token\n        }\n      });\n      dispatch({\n        type: PRODUCT_SAVE_SUCCESS,\n        payload: data\n      });\n    }\n  } catch (error) {\n    dispatch({\n      type: PRODUCT_SAVE_FAIL,\n      payload: error.message\n    });\n  }\n};\n\nexport { listProducts, detailsProduct, saveProduct };","map":{"version":3,"sources":["/home/tanhong/REACT PROJECT/frontend2_react_web/frontend/src/actions/productActions.js"],"names":["axios","PRODUCT_LIST_REQUEST","PRODUCT_LIST_SUCCESS","PRODUCT_LIST_FAIL","PRODUCT_DETAILS_REQUEST","PRODUCT_DETAILS_FAIL","PRODUCT_DETAILS_SUCCESS","listProducts","dispatch","type","data","get","payload","error","message","detailsProduct","productId","saveProduct","product","getState","PRODUCT_SAVE_REQUEST","userSignin","userInfo","_id","Axios","post","headers","Authorization","token","PRODUCT_SAVE_SUCCESS","put","PRODUCT_SAVE_FAIL"],"mappings":"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","sourcesContent":["import axios from \"axios\";\nimport { PRODUCT_LIST_REQUEST, PRODUCT_LIST_SUCCESS, PRODUCT_LIST_FAIL, PRODUCT_DETAILS_REQUEST, PRODUCT_DETAILS_FAIL, PRODUCT_DETAILS_SUCCESS } from \"../constants/productConstants\";\n\nconst listProducts = () => async (dispatch) => {\n    try {\n        dispatch({ type: PRODUCT_LIST_REQUEST });\n        const { data } = await axios.get('/api/products');\n        dispatch({ type: PRODUCT_LIST_SUCCESS, payload: data });\n    } catch (error) {\n        dispatch({ type: PRODUCT_LIST_FAIL, payload: error.message });\n    }\n};\n\nconst detailsProduct = (productId) => async (dispatch) => {\n    try {\n        dispatch({ type: PRODUCT_DETAILS_REQUEST, payload: productId });\n        const { data } = await axios.get('/api/products/' + productId);\n        dispatch({ type: PRODUCT_DETAILS_SUCCESS, payload: data });\n    } catch (error) {\n        dispatch({ type: PRODUCT_DETAILS_FAIL, payload: error.message });\n    }\n};\n\nconst saveProduct = (product) => async (dispatch, getState) => {\n    try {\n        dispatch({ type: PRODUCT_SAVE_REQUEST, payload: product });\n        const {\n            userSignin: { userInfo },\n        } = getState();\n        if (!product._id) {\n            const { data } = await Axios.post('/api/products', product, {\n                headers: {\n                    Authorization: 'Bearer ' + userInfo.token,\n                },\n            });\n            dispatch({ type: PRODUCT_SAVE_SUCCESS, payload: data });\n        } else {\n            const { data } = await Axios.put(\n                '/api/products/' + product._id,\n                product,\n                {\n                    headers: {\n                        Authorization: 'Bearer ' + userInfo.token,\n                    },\n                }\n            );\n            dispatch({ type: PRODUCT_SAVE_SUCCESS, payload: data });\n        }\n    } catch (error) {\n        dispatch({ type: PRODUCT_SAVE_FAIL, payload: error.message });\n    }\n};\n\nexport { listProducts, detailsProduct,saveProduct };"]},"metadata":{},"sourceType":"module"}